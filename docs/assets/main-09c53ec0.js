import{s,R as r,r as l,E as u,P as x}from"./radio-23f87680.js";const a=document.querySelector(".share");let c=0;a.addEventListener("click",async()=>{try{navigator.share?await navigator.share({title:"Check my Pulsar animation",url:window.location.href}):(await navigator.clipboard.writeText(window.location.href),clearTimeout(c),a.classList.add("share--success"),c=setTimeout(()=>{a.classList.remove("share--success")},3e3))}catch(n){if(n.name==="AbortError")return;clearTimeout(c),a.classList.add("share--error"),c=setTimeout(()=>{a.classList.remove("share--error")},3e3)}});const o=document.querySelector(".tutorial"),d=document.querySelector(".intro-text");let t=null;const e=[{text:"Pulsar allows you to create animations using code.",code:"sin(t) * 0.5 + 0.5",grid:"classic",animate:"scale"},{text:"Write code that returns a value between 0 and 1. Try changing the code below.",code:"0.5 ",grid:"classic",animate:"scale"},{text:'The code is evaluated for each "pixel" individually.',code:"random()",grid:"classic",animate:"scale"},{text:'Parameter "t" is time in fifth of a second.',code:"cos(t) * 0.5 + 0.5",grid:"classic",animate:"scale"},{text:'You can speed up or slow down the animation by multiplying the "t". To make it loop use the "%" operator.',code:"(t * 0.1) % 1",grid:"classic",animate:"scale"},{text:'Parameters "x" and "y" are coordinates and they span roughly from -6 to 6.',code:"abs(x / 12) + abs(y / 12)",grid:"classic",animate:"scale"},{text:'Parameter "i" is the index of the pixel in the grid.',code:"i % 2"},{text:'You can use any of the mathematical functions available in JavaScript like "cos" or "sqrt".',code:"cos(x) + sin(y)",grid:"classic",animate:"scale"},{text:"Simplex noise is also available.",code:"noise(x + t, y + t)",grid:"classic",animate:"scale"},{text:"You can switch between different grid types and animation properties.",code:"cos(x + t) * 0.5 + 0.5",grid:"hex",animate:"both"},{text:"Here are a few examples to get you started. Radial wave:",code:"(cos(sqrt(x * x + y * y) - t) + 1) / 2",grid:"classic",animate:"scale"},{text:"Liner cosine wave:",code:"cos(x * 0.8 + t) > y * 0.25 ? 1 : 0",grid:"classic",animate:"scale"},{text:'"Floral" pattern:',code:"(cos(sin(x * y) + t * 0.66) + 1) / 2",grid:"classic",animate:"scale"},{text:"Experiment combining different functions and parameters to create funky animations. Have fun!",code:"sqrt(x*x + y*y) > (cos(x + t) + 1) / 2 * 5  ? noise(x + t, y + t) * 0.3 : 1",grid:"classic",animate:"scale"},{text:d.innerText,code:""}],h={[e.length-2]:"Finish",[e.length-1]:"Restart"};class g{constructor(m){e[e.length-1].code=s.code,e[e.length-1].grid=s.grid,e[e.length-1].animate=s.animate,o.addEventListener("click",()=>{t===null?t=0:t=(t+1)%e.length,o.innerHTML=h[t]||"Next";const i=e[t];d.innerHTML=i.text,s.updateAll({grid:i.grid||"classic",animate:i.animate||"scale",code:i.code}),m.play()})}}new r("grid",["classic","hex","triangular"],l.grid||"");new r("animate",["scale","opacity","both"],l.animate||"");new u;const y=new x;new g(y);
